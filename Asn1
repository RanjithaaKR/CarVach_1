
### Step 1: API Development with FastAPI and PostgreSQL

1. **Setup FastAPI and Database Connection**:
   - Install FastAPI and `asyncpg` (PostgreSQL library for Python).
   - Set up your FastAPI app and connect it to your PostgreSQL database.

```python
# main.py
from fastapi import FastAPI, HTTPException, Depends
from sqlalchemy import create_engine, Column, Integer, String, MetaData
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker

DATABASE_URL = "postgresql://user:password@localhost/db_name"

engine = create_engine(DATABASE_URL)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()

app = FastAPI()

class Item(Base):
    __tablename__ = "items"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, index=True)
    description = Column(String)

metadata = MetaData()

Base.metadata.create_all(bind=engine)
```

2. **CRUD Endpoints**:
   - Create CRUD endpoints using FastAPI.

```python
# main.py (continued)
from fastapi import Depends

def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.post("/items/")
def create_item(item: Item, db: Session = Depends(get_db)):
    db.add(item)
    db.commit()
    db.refresh(item)
    return item

@app.get("/items/{item_id}")
def read_item(item_id: int, db: Session = Depends(get_db)):
    item = db.query(Item).filter(Item.id == item_id).first()
    if item:
        return item
    raise HTTPException(status_code=404, detail="Item not found")
```

### Step 2: Secure Your API

1. **Authentication and Authorization**:
   - Implement authentication using OAuth2 or JWT.
   - Implement authorization based on user roles.

```python
# main.py (continued)
from fastapi import Depends, HTTPException
from fastapi.security import OAuth2PasswordBearer

security = OAuth2PasswordBearer(tokenUrl="token")

def get_current_user(token: str = Depends(security)):
    # Implement user authentication logic based on token
    pass

@app.post("/secure-items/")
def create_secure_item(item: Item, current_user: User = Depends(get_current_user)):
    # Implement authorization logic based on user roles
    pass
```

2. **Input Validation**:
   - Use Pydantic models for input validation.

```python
# main.py (continued)
from pydantic import BaseModel

class Item(BaseModel):
    name: str
    description: str = None
```

### Step 3: Deploy on Azure Cloud Infrastructure

1. **Set up Azure Account**:
   - Sign up for an Azure account.

2. **Create PostgreSQL Database on Azure**:
   - Use Azure Database for PostgreSQL to create a new database instance.

3. **Deploy FastAPI App on Azure App Service**:
   - Deploy your FastAPI application on Azure App Service.
   - Configure environment variables for your Azure Database connection.

### Step 4: Ensure Scalability

1. **Horizontal Scaling**:
   - Configure Azure App Service to scale horizontally based on load.

2. **Database Scaling**:
   - Configure your Azure Database for PostgreSQL to handle increasing loads.

### Step 5: Documentation

1. **Deployment Guide**:
   - Document the step-by-step process for deploying your FastAPI application on Azure.

2. **API Documentation**:
   - Generate API documentation using Swagger UI or FastAPI's built-in documentation generator.

3. **Security Considerations**:
   - Document the security measures you've implemented in your API.

4. **Scalability Guidelines**:
   - Provide guidelines for scaling your API and database infrastructure.

Remember to adapt the code and configurations to fit your specific project requirements and follow best practices for security and scalability. Additionally, ensure that you handle sensitive information (like database credentials) securely, such as using Azure Key Vault for secret management.
